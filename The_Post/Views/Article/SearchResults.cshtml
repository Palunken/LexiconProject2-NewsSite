@using X.PagedList.Mvc.Core; 
@model The_Post.Models.VM.SearchVM

<h2 class="pb-2 mb-4">Search results for "@Model.SearchTerm"</h2>



<!--Div-structure that mimics the one in the Front page-->
<div class="container-fluid">
    <div class="row justify-content-between gap-lg-5">
        <div class="col-lg-2 order-3 order-lg-1 flex-lg-grow-1"></div>

        <!-- Articles found -->
        <main class="col-lg-6 order-1 order-lg-2 flex-lg-grow-1">
            @* <h1 class="w-100 pb-2 mb-4 text-center" style="border-bottom: 1px solid #A8A8A8;color: #0A2472;"> @Model.Category </h1> *@
            @foreach (var article in Model.Articles)
            {
                <partial name="_ArticleListingPartial" model="article" />
            }
        </main>

        <div class="col-lg-2 order-2 order-lg-3 flex-lg-grow-1"></div>
    </div>
</div>


<!--If the results take up more than one page, page links are displayed (pagination)-->
@if(Model.Articles.PageCount > 1)
{
    <nav aria-label="Search results">
        @Html.PagedListPager(
            Model.Articles,
            page => Url.Action("SearchResults", "Article", new { searchTerm = Model.SearchTerm, page }),
            new PagedListRenderOptions
            {
                LiElementClasses = new[] { "page-item" },
                PageClasses = new[] { "page-link" },
                UlElementClasses = new[] { "pagination", "justify-content-center", "mt-4" },
                DisplayLinkToFirstPage = PagedListDisplayMode.IfNeeded,
                DisplayLinkToLastPage = PagedListDisplayMode.IfNeeded,
                DisplayLinkToPreviousPage = PagedListDisplayMode.IfNeeded,
                DisplayLinkToNextPage = PagedListDisplayMode.IfNeeded,
                LinkToFirstPageFormat = "«",
                LinkToPreviousPageFormat = "‹",
                LinkToNextPageFormat = "›",
                LinkToLastPageFormat = "»"
            }
        )
    </nav>
}
