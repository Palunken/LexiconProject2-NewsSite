@model The_Post.Models.VM.WeatherVM

@{
    ViewData["Title"] = "Weather";
}


<!--Div-structure that mimics the one in the Front page-->
<div class="container-fluid">
    <div class="row justify-content-between gap-lg-5">
        <div class="col-lg-2 order-3 order-lg-1 flex-lg-grow-1"></div>

        <main class="col-lg-6 order-1 order-lg-2 flex-lg-grow-1">

            <h1 class="w-100 pb-2 mb-2 text-center" style="border-bottom: 1px solid #A8A8A8;color: #0A2472;"> Weather </h1>

            <!-- Wrapper for the background image and weather cards -->
            <div class="position-relative d-flex flex-column align-items-center p-2">
                <!-- Background image -->
                <div class="position-absolute top-0 start-0 w-100 h-100 bg-cover bg-center"
                     style="background-image: url('https://images.pexels.com/photos/53594/blue-clouds-day-fluffy-53594.jpeg'); height: 100%; pointer-events: none;">
                </div>

                <!-- Weather cards container-->
                <div id="weatherCardsContainer" class="d-flex flex-nowrap overflow-auto gap-2 position-relative align-items-center"
                     style="scrollbar-color: rgba(0, 0, 0, 0.2) transparent; min-height: 150px;">
                    @foreach (var forecast in Model.Forecasts)
                    {
                        <partial name="../Shared/_WeatherPartial" model="forecast" />
                    }
                </div>
            </div>

            <div class="d-flex justify-content-start pb-3 my-2">
                <!-- Add City Button -->
                <button id="addCityButton" class="btn btn-outline-secondary btn-lg d-flex align-items-center justify-content-center weather-button-text px-2 me-2 ms-1" data-bs-toggle="modal" data-bs-target="#addCityModal">Add City</button>

                <!-- Remove City Button -->
                <button class="btn btn-outline-secondary btn-lg d-flex align-items-center justify-content-center weather-button-text px-2" id="removeCitiesBtn" onclick="enableRemoveMode()">Remove City</button>
            </div>


            <!-- Modal for adding a city -->
            <div class="modal fade" id="addCityModal" tabindex="-1" aria-labelledby="addCityModalLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header modal-weather-color">
                            <h5 class="modal-title" id="addCityModalLabel">Add City</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body modal-weather-color">
                            <input type="text" id="cityNameInput" class="form-control" placeholder="Enter city name">
                        </div>
                        <div class="modal-footer modal-weather-color">
                            <button type="button" class="btn btn-primary" id="addCityConfirm">Add</button>
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        </div>
                    </div>
                </div>
            </div>



            <!--Articles listing-->
            @foreach (var article in Model.Articles)
            {
                <partial name="_ArticleListingPartial" model="article" />
            }
        </main>

        <div class="col-lg-2 order-2 order-lg-3 flex-lg-grow-1"></div>
    </div>
</div>






<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    $(document).ready(function () {

        var removeMode = false;

        var isAuthenticated = @Json.Serialize(User.Identity.IsAuthenticated);

        // Get temporary stored weather cards if user is not logged in
        if (!isAuthenticated) {
            var storedCities = JSON.parse(sessionStorage.getItem("weatherCards"));

            // If storedCities is not null, each html-element (card) is added to the page
            if (storedCities) {
                storedCities.forEach(function (city) {
                    $.ajax({
                        url: '/Article/AddCityNotLoggedIn',
                        type: 'POST',
                        data: { city: city },
                        success: function (response) {
                            $(".d-flex.flex-nowrap").append(response);
                        },
                        error: function () {
                            console.error("Failed to load weather data for " + city);
                        }
                    });  
                });  
            }
        }


        // Adds a city when "Add" is clicked in the modal
        $("#addCityConfirm").off("click").on("click", function () {
            

            var cityName = $.trim($("#cityNameInput").val());

            // If the user isn't logged in, a different action is called that stores the city using sessionStorage
            if(!isAuthenticated){
                $.ajax({
                    url: '/Article/AddCityNotLoggedIn',
                    type: 'POST',
                    data: { city: cityName },
                    success: function (response) {
                        $(".d-flex.flex-nowrap").append(response);

                         // Store city name in sessionStorage if not included already
                        var storedCities = JSON.parse(sessionStorage.getItem("weatherCards")) || [];
                        if (!storedCities.includes(cityName)){
                            storedCities.push(cityName);
                            sessionStorage.setItem("weatherCards", JSON.stringify(storedCities));
                        }

                        $("#cityNameInput").val("");
                        $("#addCityModal").modal("hide");
                    },
                    error: function () {
                        alert("Failed to fetch weather data.");
                    }
                });
            }
            // If the user is logged in
            else{
            // Gets all city names from the cards
            var existingCities = $(".weather-card").map(function () {
                return $(this).data("city").toLowerCase();
            }).get();

            if (cityName === "") {
                $("#cityNameInput").addClass("is-invalid");
                return;
            } else {
                $("#cityNameInput").removeClass("is-invalid");
            }

            if (existingCities.includes(cityName.toLowerCase())) {
                $("#cityNameInput").addClass("is-invalid");
                return;
            }
            // Calls action that adds the city to the user's other cities
            $.ajax({
                url: '/Article/AddCity',
                type: 'POST',
                data: { city: cityName },
                success: function (response) {
                    $(".d-flex.flex-nowrap").append(response);
                    $("#cityNameInput").val("");
                    $("#addCityModal").modal("hide");
                },
                error: function () {
                    alert("Failed to fetch weather data.");
                }
            });
            }
            
        });

        // When the minus-button is clicked, "remove mode" is activated for the cards. 
        // If you click again, it gets deactivated.
        $("#removeCitiesBtn").click(function () {
            if (removeMode) {
                disableRemoveMode();
            }
            else    {
                enableRemoveMode();
            }
        });

        // If removeMode is enabled, a click on a card deletes the card 
        $(document).on('click', '.weather-card', function () {
            // If remove mode isn't enabled, nothing happens
            if (!removeMode) return;

            var city = $(this).data('city'); // Get city name from the data attribute

            // If not logged in
            if(!isAuthenticated){
                // Removes the card from the html page.
                $(this).remove();

                // Removes the card from session storage
                var storedCities = JSON.parse(sessionStorage.getItem("weatherCards")) || [];
                storedCities = storedCities.filter(c => c !== city);
                sessionStorage.setItem("weatherCards", JSON.stringify(storedCities));

                // Disables "remove mode"
                disableRemoveMode();
            }
            else{

            $.ajax({
                url: '/Article/RemoveCity',
                type: 'POST',
                data: { city: city },
                success: function () {
                    $(this).remove();
                    disableRemoveMode();  // Disable remove mode after one card is removed
                }.bind(this),
                error: function () {
                    alert("Failed to remove city.");
                }
            });
            }
        });

        $("#addCityButton").on("click", function(){
            disableRemoveMode();
        });


        // Cities are able to be removed by clicking on them
        function enableRemoveMode() {
            removeMode = true;
            $(".weather-card").addClass("removable");
        }

        function disableRemoveMode() {
            removeMode = false;
            $(".weather-card").removeClass("removable");
        }
    });
</script>
